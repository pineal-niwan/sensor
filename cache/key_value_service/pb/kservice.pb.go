// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kservice.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//key
type MsgKey struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgKey) Reset()         { *m = MsgKey{} }
func (m *MsgKey) String() string { return proto.CompactTextString(m) }
func (*MsgKey) ProtoMessage()    {}
func (*MsgKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ee8e12a3d2812f4, []int{0}
}

func (m *MsgKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgKey.Unmarshal(m, b)
}
func (m *MsgKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgKey.Marshal(b, m, deterministic)
}
func (m *MsgKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgKey.Merge(m, src)
}
func (m *MsgKey) XXX_Size() int {
	return xxx_messageInfo_MsgKey.Size(m)
}
func (m *MsgKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgKey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgKey proto.InternalMessageInfo

func (m *MsgKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

//value
type MsgValue struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgValue) Reset()         { *m = MsgValue{} }
func (m *MsgValue) String() string { return proto.CompactTextString(m) }
func (*MsgValue) ProtoMessage()    {}
func (*MsgValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ee8e12a3d2812f4, []int{1}
}

func (m *MsgValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgValue.Unmarshal(m, b)
}
func (m *MsgValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgValue.Marshal(b, m, deterministic)
}
func (m *MsgValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgValue.Merge(m, src)
}
func (m *MsgValue) XXX_Size() int {
	return xxx_messageInfo_MsgValue.Size(m)
}
func (m *MsgValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgValue.DiscardUnknown(m)
}

var xxx_messageInfo_MsgValue proto.InternalMessageInfo

func (m *MsgValue) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *MsgValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

//key - value
type MsgKeyValue struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgKeyValue) Reset()         { *m = MsgKeyValue{} }
func (m *MsgKeyValue) String() string { return proto.CompactTextString(m) }
func (*MsgKeyValue) ProtoMessage()    {}
func (*MsgKeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ee8e12a3d2812f4, []int{2}
}

func (m *MsgKeyValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgKeyValue.Unmarshal(m, b)
}
func (m *MsgKeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgKeyValue.Marshal(b, m, deterministic)
}
func (m *MsgKeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgKeyValue.Merge(m, src)
}
func (m *MsgKeyValue) XXX_Size() int {
	return xxx_messageInfo_MsgKeyValue.Size(m)
}
func (m *MsgKeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgKeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_MsgKeyValue proto.InternalMessageInfo

func (m *MsgKeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MsgKeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

//key - value - timeout
type MsgKeyValueTimeout struct {
	Timeout              int64    `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgKeyValueTimeout) Reset()         { *m = MsgKeyValueTimeout{} }
func (m *MsgKeyValueTimeout) String() string { return proto.CompactTextString(m) }
func (*MsgKeyValueTimeout) ProtoMessage()    {}
func (*MsgKeyValueTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ee8e12a3d2812f4, []int{3}
}

func (m *MsgKeyValueTimeout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgKeyValueTimeout.Unmarshal(m, b)
}
func (m *MsgKeyValueTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgKeyValueTimeout.Marshal(b, m, deterministic)
}
func (m *MsgKeyValueTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgKeyValueTimeout.Merge(m, src)
}
func (m *MsgKeyValueTimeout) XXX_Size() int {
	return xxx_messageInfo_MsgKeyValueTimeout.Size(m)
}
func (m *MsgKeyValueTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgKeyValueTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_MsgKeyValueTimeout proto.InternalMessageInfo

func (m *MsgKeyValueTimeout) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *MsgKeyValueTimeout) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MsgKeyValueTimeout) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

//key - timeout
type MsgKeyTimeout struct {
	Timeout              int64    `protobuf:"varint,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgKeyTimeout) Reset()         { *m = MsgKeyTimeout{} }
func (m *MsgKeyTimeout) String() string { return proto.CompactTextString(m) }
func (*MsgKeyTimeout) ProtoMessage()    {}
func (*MsgKeyTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ee8e12a3d2812f4, []int{4}
}

func (m *MsgKeyTimeout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgKeyTimeout.Unmarshal(m, b)
}
func (m *MsgKeyTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgKeyTimeout.Marshal(b, m, deterministic)
}
func (m *MsgKeyTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgKeyTimeout.Merge(m, src)
}
func (m *MsgKeyTimeout) XXX_Size() int {
	return xxx_messageInfo_MsgKeyTimeout.Size(m)
}
func (m *MsgKeyTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgKeyTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_MsgKeyTimeout proto.InternalMessageInfo

func (m *MsgKeyTimeout) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *MsgKeyTimeout) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

//长度
type MsgLen struct {
	HashLen              int32    `protobuf:"varint,1,opt,name=hashLen,proto3" json:"hashLen,omitempty"`
	ListLen              int32    `protobuf:"varint,2,opt,name=listLen,proto3" json:"listLen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgLen) Reset()         { *m = MsgLen{} }
func (m *MsgLen) String() string { return proto.CompactTextString(m) }
func (*MsgLen) ProtoMessage()    {}
func (*MsgLen) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ee8e12a3d2812f4, []int{5}
}

func (m *MsgLen) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgLen.Unmarshal(m, b)
}
func (m *MsgLen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgLen.Marshal(b, m, deterministic)
}
func (m *MsgLen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLen.Merge(m, src)
}
func (m *MsgLen) XXX_Size() int {
	return xxx_messageInfo_MsgLen.Size(m)
}
func (m *MsgLen) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLen.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLen proto.InternalMessageInfo

func (m *MsgLen) GetHashLen() int32 {
	if m != nil {
		return m.HashLen
	}
	return 0
}

func (m *MsgLen) GetListLen() int32 {
	if m != nil {
		return m.ListLen
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgKey)(nil), "pb.MsgKey")
	proto.RegisterType((*MsgValue)(nil), "pb.MsgValue")
	proto.RegisterType((*MsgKeyValue)(nil), "pb.MsgKeyValue")
	proto.RegisterType((*MsgKeyValueTimeout)(nil), "pb.MsgKeyValueTimeout")
	proto.RegisterType((*MsgKeyTimeout)(nil), "pb.MsgKeyTimeout")
	proto.RegisterType((*MsgLen)(nil), "pb.MsgLen")
}

func init() { proto.RegisterFile("kservice.proto", fileDescriptor_4ee8e12a3d2812f4) }

var fileDescriptor_4ee8e12a3d2812f4 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x4d, 0x4f, 0xfa, 0x40,
	0x10, 0xc6, 0xc3, 0x36, 0xf0, 0xe7, 0x3f, 0x62, 0xd1, 0x89, 0x21, 0xa4, 0x1e, 0x24, 0x3d, 0x71,
	0x30, 0x8b, 0x2f, 0x31, 0x1e, 0xf4, 0x60, 0x62, 0x0c, 0x07, 0xe1, 0x52, 0x08, 0x9e, 0xa9, 0x19,
	0xda, 0xa6, 0x85, 0x6d, 0xda, 0x85, 0x84, 0x2f, 0xe7, 0x67, 0x33, 0xbb, 0xcb, 0x06, 0x7c, 0xe9,
	0xc5, 0xdb, 0xcc, 0x3c, 0xf3, 0xfc, 0xb6, 0xd3, 0x07, 0xdc, 0xb4, 0xa4, 0x62, 0x93, 0xbc, 0x13,
	0xcf, 0x0b, 0x21, 0x05, 0xb2, 0x3c, 0xf4, 0xce, 0x23, 0x21, 0xa2, 0x8c, 0x06, 0x7a, 0x12, 0xae,
	0x17, 0x03, 0x5a, 0xe6, 0x72, 0x6b, 0x16, 0x7c, 0x0f, 0x1a, 0xe3, 0x32, 0x7a, 0xa5, 0x2d, 0x9e,
	0x80, 0x93, 0xd2, 0xb6, 0x5b, 0xeb, 0xd5, 0xfa, 0xff, 0x03, 0x55, 0xfa, 0x57, 0xd0, 0x1c, 0x97,
	0xd1, 0x6c, 0x9e, 0xad, 0x09, 0x5d, 0x60, 0x22, 0xd5, 0x62, 0x33, 0x60, 0x22, 0xc5, 0x33, 0xa8,
	0x6f, 0x94, 0xd0, 0x65, 0xbd, 0x5a, 0xbf, 0x15, 0x98, 0xc6, 0xbf, 0x83, 0x23, 0x43, 0x33, 0xa6,
	0x1f, 0xc8, 0x0a, 0xdb, 0x0c, 0xf0, 0xc0, 0x36, 0x4d, 0x96, 0x24, 0xd6, 0x12, 0xbb, 0xf0, 0x4f,
	0x9a, 0x52, 0x13, 0x9c, 0xc0, 0xb6, 0x96, 0xcb, 0x7e, 0xe1, 0x3a, 0x87, 0xdc, 0x07, 0x38, 0x36,
	0xdc, 0x3f, 0x20, 0xfd, 0x47, 0xfd, 0x67, 0x46, 0xb4, 0x52, 0xae, 0x78, 0x5e, 0xc6, 0x23, 0x5a,
	0x69, 0x57, 0x3d, 0xb0, 0xad, 0x52, 0xb2, 0xa4, 0x94, 0x4a, 0x61, 0x46, 0xd9, 0xb5, 0x37, 0x1f,
	0x0c, 0xda, 0xf6, 0xa0, 0x89, 0x89, 0x04, 0x39, 0x38, 0x13, 0x92, 0xd8, 0xe6, 0x79, 0xc8, 0x0f,
	0xee, 0xf5, 0x3a, 0xdc, 0x24, 0xc4, 0x6d, 0x42, 0xfc, 0x45, 0x25, 0x84, 0x4f, 0xe0, 0x4e, 0x48,
	0xbe, 0x25, 0x32, 0xb6, 0xdf, 0xdf, 0xf9, 0x66, 0xdd, 0xcd, 0x2b, 0x09, 0x17, 0xe0, 0x0c, 0x49,
	0x22, 0xec, 0x6d, 0x5e, 0x6b, 0x57, 0x9b, 0x84, 0xae, 0xc1, 0x1d, 0x92, 0x9c, 0xc6, 0xb4, 0x0a,
	0x68, 0x51, 0x50, 0x19, 0xe3, 0xe9, 0x7e, 0xd7, 0xd2, 0xbf, 0x5a, 0x2e, 0xa1, 0x31, 0x24, 0x75,
	0x23, 0x56, 0xbc, 0xea, 0xd9, 0xe7, 0xd4, 0xce, 0x3d, 0xd4, 0x9f, 0x33, 0x9a, 0x17, 0x95, 0xcb,
	0x15, 0xf3, 0xb0, 0xa1, 0xfb, 0xdb, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa5, 0xfb, 0xa1, 0x0b,
	0xd2, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeyValueServiceClient is the client API for KeyValueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyValueServiceClient interface {
	//设置缓存
	Set(ctx context.Context, in *MsgKeyValue, opts ...grpc.CallOption) (*empty.Empty, error)
	//设置缓存-带超时
	SetWithTimeout(ctx context.Context, in *MsgKeyValueTimeout, opts ...grpc.CallOption) (*empty.Empty, error)
	//获取缓存
	Get(ctx context.Context, in *MsgKey, opts ...grpc.CallOption) (*MsgValue, error)
	//获取缓存后刷新
	GetThenRefresh(ctx context.Context, in *MsgKeyTimeout, opts ...grpc.CallOption) (*MsgValue, error)
	//获取缓存长度
	GetLen(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MsgLen, error)
	//清空缓存
	Clear(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type keyValueServiceClient struct {
	cc *grpc.ClientConn
}

func NewKeyValueServiceClient(cc *grpc.ClientConn) KeyValueServiceClient {
	return &keyValueServiceClient{cc}
}

func (c *keyValueServiceClient) Set(ctx context.Context, in *MsgKeyValue, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.KeyValueService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) SetWithTimeout(ctx context.Context, in *MsgKeyValueTimeout, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.KeyValueService/SetWithTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) Get(ctx context.Context, in *MsgKey, opts ...grpc.CallOption) (*MsgValue, error) {
	out := new(MsgValue)
	err := c.cc.Invoke(ctx, "/pb.KeyValueService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) GetThenRefresh(ctx context.Context, in *MsgKeyTimeout, opts ...grpc.CallOption) (*MsgValue, error) {
	out := new(MsgValue)
	err := c.cc.Invoke(ctx, "/pb.KeyValueService/GetThenRefresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) GetLen(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MsgLen, error) {
	out := new(MsgLen)
	err := c.cc.Invoke(ctx, "/pb.KeyValueService/GetLen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyValueServiceClient) Clear(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.KeyValueService/Clear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyValueServiceServer is the server API for KeyValueService service.
type KeyValueServiceServer interface {
	//设置缓存
	Set(context.Context, *MsgKeyValue) (*empty.Empty, error)
	//设置缓存-带超时
	SetWithTimeout(context.Context, *MsgKeyValueTimeout) (*empty.Empty, error)
	//获取缓存
	Get(context.Context, *MsgKey) (*MsgValue, error)
	//获取缓存后刷新
	GetThenRefresh(context.Context, *MsgKeyTimeout) (*MsgValue, error)
	//获取缓存长度
	GetLen(context.Context, *empty.Empty) (*MsgLen, error)
	//清空缓存
	Clear(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterKeyValueServiceServer(s *grpc.Server, srv KeyValueServiceServer) {
	s.RegisterService(&_KeyValueService_serviceDesc, srv)
}

func _KeyValueService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KeyValueService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).Set(ctx, req.(*MsgKeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_SetWithTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKeyValueTimeout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).SetWithTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KeyValueService/SetWithTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).SetWithTimeout(ctx, req.(*MsgKeyValueTimeout))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KeyValueService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).Get(ctx, req.(*MsgKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_GetThenRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKeyTimeout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).GetThenRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KeyValueService/GetThenRefresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).GetThenRefresh(ctx, req.(*MsgKeyTimeout))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_GetLen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).GetLen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KeyValueService/GetLen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).GetLen(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyValueService_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyValueServiceServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.KeyValueService/Clear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyValueServiceServer).Clear(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyValueService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.KeyValueService",
	HandlerType: (*KeyValueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _KeyValueService_Set_Handler,
		},
		{
			MethodName: "SetWithTimeout",
			Handler:    _KeyValueService_SetWithTimeout_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _KeyValueService_Get_Handler,
		},
		{
			MethodName: "GetThenRefresh",
			Handler:    _KeyValueService_GetThenRefresh_Handler,
		},
		{
			MethodName: "GetLen",
			Handler:    _KeyValueService_GetLen_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _KeyValueService_Clear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kservice.proto",
}
